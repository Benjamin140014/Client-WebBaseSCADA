/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('template-client:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require("socket.io")(server);
const mongoose = require('mongoose') ; 
const opcua = require('node-opcua-client') ; 
const nodemailer = require('nodemailer');
var excel = require('exceljs')  ; 
var variableConfig = require('../components/variableConfig.json') ; 
var setAllVariable = [] ; 
var arrayAlarmAck = [] ; 
var domainDownload = {} ; 
// DB Config
const db = require("../config/keys").mongoURI;
const DataSchema = require("../models/DataSchema");

// Connect to MongoDB
mongoose
  .connect(db, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("MongoDB Connected"))
  .catch((err) => console.log(err));
// delare datatype
const moduleTypesMap = 
{
    'Bool' : 'Boolean',
    'Real' : 'Float',
    'Double' : 'Double',
    'Byte' : 'Byte',
    'Int' : 'Int16',
    'DInt' : 'Int32',
    'LInt' : 'Int64',
    'UInt' : 'UInt16',
    'UDInt' : 'UInt32',
    'ULInt' : 'UInt64',    
    'String' : 'String',
    'Word' : 'UInt16',
    'DWord' : 'UInt32',
};
const moduleTypesCodeMap = 
{
    'Boolean' : opcua.DataType.Boolean,
    'Float' : opcua.DataType.Float,
    'Double' : opcua.DataType.Double,
    'Byte' : opcua.DataType.Byte,
    'Int16' : opcua.DataType.Int16,
    'Int32' : opcua.DataType.Int32,
    'Int64' : opcua.DataType.Int64,
    'UInt16' : opcua.DataType.UInt16,
    'UInt32' : opcua.DataType.UInt32,
    'UInt64' : opcua.DataType.UInt64,
    'String' : opcua.DataType.String
};
// Create opc ua client 
const connectionStrategy = {
  initialDelay: 1000,
  maxRetry: 1,
};
var options = {};
var authentication = {} ;
var messageStatus = {} ;
var endpointUrl = "" ; 
var client ; 
var moduleData = {} ; 
var allVariableConfig = {} ; 
var stateFailConnection = false ; 
var dataChangeSend = {} ; 
// get all variable writeable
for(let i=0 ; i < variableConfig.Data.length ; i++){
  for(let j=0 ; j< variableConfig.Data[i].variablesList.length ; j++){
    if(variableConfig.Data[i].variablesList[j].writable === true){
     let element = {deviceName: variableConfig.Data[i].deviceName , name: variableConfig.Data[i].variablesList[j].name,
      dataType: variableConfig.Data[i].variablesList[j].dataType
    }
      setAllVariable.push(element) ; 
    }
  }
}

io.on('connection', function (socket){
  console.log('Client is openning ...')  ;
  socket.emit('loadInitialize', variableConfig) ; 
    // Create function client
   async function main() {
    try {
      // step 1 : connect to opc server
      await client.connect(endpointUrl);
      // step 2 : createSession ;
      var session ; 
      if(authentication.allowAnonymous === true){
        var session = await client.createSession();
        moduleData.session = session ; 
        console.log("session anonymous created !");
      }else{
        const userIdentity = {
          type: opcua.UserTokenType.UserName,
          userName: authentication.user,
          password: authentication.password,
        };
        var session = await client.createSession(userIdentity);
        moduleData.session = session ; 
        console.log("session user created !");
      } ; 
      // step 3 : browse
      const browseResult = await session.browse("RootFolder");
      for (const reference of browseResult.references) {
        console.log(" -> ", reference.browseName.toString());
      } ; 
     
      // step 4 : read a variable with readVariableValue
      const simulation= await session.readVariableValue('ns=1;s=simulation.random');
      console.log(" value of Variable simulation = ", simulation.value.toString());
      // step 5: install a subscription and install a monitored item for 10 seconds
      const subscription = opcua.ClientSubscription.create(session, {
        requestedPublishingInterval: 1000,
        requestedLifetimeCount: 100,
        requestedMaxKeepAliveCount: 10,
        maxNotificationsPerPublish: 100,
        publishingEnabled: true,
        priority: 10,
      });
      subscription.on("started", function() {console.log(
            "subscription started for 2 seconds - subscriptionId =",
            subscription.subscriptionId
          );
        })
        .on("keepalive", function() {
          console.log("keepalive");
        })
        .on("terminated", function() {
          console.log("terminated");
        });
        var itemsToMonitor = [];
        allVariableConfig.nameVariable = [] ;
      // install monitored item group
       for (let i =0 ; i < variableConfig.Data.length ; i ++ ){
         for(let j = 0 ; j < variableConfig.Data[i].variablesList.length ; j++){
           var nodeToMonitor = {attributeId: opcua.AttributeIds.Value ,
                               nodeId: 'ns=1;s=' + variableConfig.Data[i].deviceName + '.' + variableConfig.Data[i].variablesList[j].name } ;
                               itemsToMonitor.push(nodeToMonitor) ; 
         }
       }
       allVariableConfig.nodeToMonitor = itemsToMonitor ; 
       for (let i =0 ; i < variableConfig.Data.length ; i ++ ){
        for(let j = 0 ; j < variableConfig.Data[i].variablesList.length ; j++){
          var nameVariable = { name: variableConfig.Data[i].variablesList[j].name ,
            dataType: variableConfig.Data[i].variablesList[j].dataType  } ;
        allVariableConfig.nameVariable.push(nameVariable) ; 
        }
      } 
      moduleData.data = [itemsToMonitor.length] ; 
      
      const optionsGroup = {
        discardOldest: true,
        queueSize: 1,
        samplingInterval: 100,
      };
      const monitoredItemGroup = opcua.ClientMonitoredItemGroup.create(
        subscription,
        itemsToMonitor,
        optionsGroup,
        opcua.TimestampsToReturn.Both
      );
      await monitoredItemGroup.on("initialized", async () => {
        console.log(" Initialized !");
      });
      
      monitoredItemGroup.on("changed", (monitoredItem, dataValue, index) => {
        for(let i = 0 ; i < itemsToMonitor.length ; i++){
          if (index === i) {
            var datasave = {
              name: allVariableConfig.nameVariable[i].name ,
              data: dataValue.value.value ,
              dataType: allVariableConfig.nameVariable[i].dataType 
            }
            moduleData.data[i] = datasave; 
            dataChangeSend = datasave ; 
         } 
        } 
      });
      // Connection has been lost
      client.on('connection_lost' , ()=>{
        messageStatus.message  = 'Disconnected' ; 
        stateFailConnection = true ;  
      })
      socket.emit('statusClient',{message: 'Client has been connected to Server' , color: 'green'} ) ; 
      messageStatus.message = 'Connected' ; 
      async function timeout(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }
      await timeout(1000);
    } catch (err) {
      console.log("An error has occured : ",err);
      socket.emit('statusClient' , {message: "Can't connect to Server" , color: 'red'}) ; 
    }
  } ;

socket.on('optionsOPC' , (data)=>{
    endpointUrl = data.endpoint ; 
    authentication.allowAnonymous = data.allowAnonymous ;
    authentication.user = data.user ;
    authentication.password = data.password ; 
    var Mode  = data.securityMode ; 
    switch (Mode) {
      case "opcua.MessageSecurityMode.None":
        options.securityMode = opcua.MessageSecurityMode.None;
        break;
      case "opcua.MessageSecurityMode.Sign":
        options.securityMode = opcua.MessageSecurityMode.Sign;
        break;
      case "opcua.MessageSecurityMode.SignAndEncrypt":
        options.securityMode = opcua.MessageSecurityMode.SignAndEncrypt;
        break;
      default:
        break;
    }
    var Policy = data.securityPolicy ;
    switch (Policy) {
      case "opcua.SecurityPolicy.None":
        options.securityPolicy = opcua.SecurityPolicy.None;
        break;
      case "opcua.SecurityPolicy.Basic128Rsa15":
        options.securityPolicy = opcua.SecurityPolicy.Basic128Rsa15;
        break;
      case "opcua.SecurityPolicy.Basic256":
        options.securityPolicy = opcua.SecurityPolicy.Basic256;
        break;
      case "opcua.SecurityPolicy.Basic256Sha256":
        options.securityPolicy = opcua.SecurityPolicy.Basic256Sha256;
        break;
      default:
        break;
    } ; 
    options.applicationName = "MyClient";
    options.connectionStrategy = connectionStrategy;
    options.endpoint_must_exist = false;
    options.keepSessionAlive = true ;
    options.requestedSessionTimeout = 1200000  ; 
    client = opcua.OPCUAClient.create(options);
    moduleData.client = client ; 
    main() ; 
  }); 
  socket.on('disConnectToServer', (data)=>{
  if(moduleData.client === undefined){
    socket.emit('statusClient',{message: 'It seem Client not have connection with Server' , color: 'red'} ) ; 
  }else{
    moduleData.client.disconnect() ; 
    socket.emit('statusClient',{message: 'Client has been disconnected to Server' , color: 'green'} ) ; 
    messageStatus.message = 'Disconnected' ; 
  }
  });
  
  var IntervalFailConnection = setInterval(() => {
    if(stateFailConnection){
      socket.emit('failConnection', 'ok');
      stateFailConnection = false ; 
      clearInterval(IntervalFailConnection) ; 
    }
  },500);
  
  // refresh client to Load Data 
  if(messageStatus.message === 'Connected'){
       // Load all config variable 
       socket.emit('loadStatus', {message: 'Connected' , endpoint: endpointUrl}) ;
       // send all variable and value 
       socket.emit('loadAllDataConfig', allVariableConfig ) ;
       setInterval(() => {
          socket.emit('historyChange', dataChangeSend) ;  
       },150);
       setInterval(() => {
           socket.emit('changeData', moduleData.data ) ;  
       },700);

       //  app.get('/api/get/All', (req ,res)=>{
       //   res.send(JSON.stringify(moduleData.data)) ; 
       //   });
       // receive data from form find Data
       socket.on("findData", function(data) {
         var resultData = [] ; 
        DataSchema.find({name: data.name , date: { $gte: data.dataarr[0], $lt: data.dataarr[1]}}, function(
          err,
          res
        ) {
          if (err) throw err;
          socket.emit("resultFindData", res);
        });
      });

      socket.on('reportData' , async (data)=>{
        var ObjectArray = [] ; 
        await DataSchema.find({name: data} , function(err , res){
          if(err) throw err ;
            var objectTemp = {}
            for(let i = 0 ; i < res.length ; i++){
              objectTemp.Name = res[i].name ; 
              objectTemp.Value = res[i].data ;
              objectTemp.DataType = res[i].dataType ; 
              objectTemp.Date =getTimeForResult(res[i].date).dateTime ; 
              ObjectArray.push(objectTemp) ; 
            }
        }) ; 
        if(ObjectArray.length > 0 ){
           var GetDate = new Date()
           let workbook = new excel.Workbook(); //creating workbook
           let worksheet = workbook.addWorksheet('Report'); //creating worksheet
           worksheet.mergeCells('A1:D2');
           worksheet.getCell('A1').value = `Thống kê số liệu của biến ${data} vào lúc ${getTime(GetDate).date}-${getTime(GetDate).time} `;
           worksheet.getCell('A1').alignment = { horizontal:'center'} ;
           worksheet.getCell('A1').font = {size: 20 , bold: true , color: 'blue'}
           worksheet.getRow(3).values = ['Name', 'Value', 'DataType', 'Date'];
           worksheet.columns = [
            {key: 'Name', width: 30 },
            {key: 'Value', width: 30},
            {key: 'DataType', width: 30 },
            {key: 'Date', width: 30} ,
          ];
          worksheet.addRows(ObjectArray);
          worksheet.getRow(3).eachCell((cell) => {
            cell.font = { bold: true };
          });
          worksheet.eachRow((row)=>{
            row.alignment =  { horizontal:'center'} 
          }) ; 
          var nameFile = `ReportVariable${data}${getTime(GetDate).dateTime}.xlsx` ; 
          workbook.xlsx.writeFile(nameFile)
          .then(function() {
           socket.emit('respondReport' , `Variable name is : ${data} has been export excel file !`) ; 
           domainDownload.nameFile = nameFile ; 
           socket.emit('isDownload' , domainDownload) ; 
          })
          .catch((err)=>{
            socket.emit('respondReport' , `Can't Export Variable name is : ${data} Because ${err} !`) ; 
          });
        }
      })

      for(let i=0 ; i < setAllVariable.length ; i++ ){
        socket.on(`set${setAllVariable[i].name}`, function(data) {
          let dataWrite = data.value ; 
          var nodesToWrite = [
            {
              nodeId: `ns=1;s=${setAllVariable[i].deviceName}.${setAllVariable[i].name}`,
              attributeId: 13,
              indexRange: null,
              value: {
                value: {
                  dataType: moduleTypesCodeMap[moduleTypesMap[setAllVariable[i].dataType]],
                  value: dataWrite,
                },
              },
            },
          ];
          moduleData.session.write(nodesToWrite, function(
            err,
            StatusCode
          ) {
            if (!err) 
            {
              socket.emit('finishWrite', setAllVariable[i].name )
              console.log("Write OK");
             }
          });
      });
      }
      // tranfer alarm Ack
      socket.on('tableAck',(data)=>{
        for(let i =0 ; i < data.length ; i ++){
          arrayAlarmAck.push(data[i]) ; 
        }
      }) ; 
      socket.emit('loadAlarmAck', arrayAlarmAck) ; 
      socket.on('ClearAlarm', (data)=>{
        arrayAlarmAck = [] ; 
      }) 
  }
  socket.on('ackDownload',(data)=>{
    app.get(`/downloadFile/${data.nameFile}` ,(req,res)=>{
      const file = data.nameFile;
      res.download(file); 
    }) ; 
    socket.emit('finishDownload', `/downloadFile/${data.nameFile}`)
  })
  socket.on('receiveEmail', (data)=>{   
  var destinationEmail = data.email ; 
  var subject = 'Response about your opinion or your requirement' ; 
  var text = "This is message for "+ data.name +  ".We have been receive your email about my system is:  " + data.comments 
  + ".We will resolve rour problem within 24h . Thank you !" ; 
  var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'hotrungquan0167@gmail.com',
      pass: 'Benjamin1997#'
    }
  });
  var mailOptions = {
    from: 'hotrungquan0167@gmail.com',
    to: destinationEmail,
    subject: subject,
    text: text
  };
  transporter.sendMail(mailOptions, function(error, info){
    if (error) {
      socket.emit('alertEmail' , error)
      console.log(error);
    } else {
      socket.emit('alertEmail' , 'Email sent: ' + info.response )
      console.log('Email sent: ' + info.response);
    }
  });
  })
}) ;

// get Time
function getTime(data){
  let today = data;
  let date = today.getFullYear() + "." +  (today.getMonth() + 1) + "." + today.getDate();
  let time = today.getHours() + "." + today.getMinutes() + "." + today.getSeconds();
  return {dateTime: date + "_" + time , date: date , time: time};
}
function getTimeForResult(data){
  let today = data;
  let date = today.getFullYear() + "/" +  (today.getMonth() + 1) + "/" + today.getDate();
  let time = today.getHours() + "/" + today.getMinutes() + "/" + today.getSeconds();
  return {dateTime: date + "-" + time , date: date , time: time};
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port , console.log(`Server Started on port ${port} `));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
